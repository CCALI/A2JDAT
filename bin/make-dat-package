#!/usr/bin/env node

var path = require('path')
var fs = require('fs-extra')
var chalk = require('chalk')
var archiver = require('archiver')
var pjson = require('../package.json')
var version = pjson.version

var datPath = path.join(__dirname, '..')
var outputPath = path.join(datPath, '..', 'a2j-dat')

// remove any existing build first
fs.removeSync(outputPath)

makePackageFolder()
makePackageZip()

function makePackageFolder () {
  fs.mkdirSync(outputPath)

  // copy the www script only from bin
  fs.copySync(path.join(datPath, 'bin', 'www'),
    path.join(outputPath, 'bin', 'www'))

  // copy node src files
  fs.copySync(path.join(datPath, 'src'),
    path.join(outputPath, 'src'))

  // copy node pdf files, ignore files in temp folder
  const filterFunc = (src, dest) => {
    if (src.indexOf('temp') > -1) {
      return fs.statSync(src).isDirectory()
    } else {
      return true
    }
  }
  fs.copySync(path.join(datPath, 'pdf'),
    path.join(outputPath, 'pdf'),
    { filter: filterFunc })

  // copy package.json  and shrinkwrap to server
  fs.copySync(path.join(datPath, 'package.json'),
    path.join(outputPath, 'package.json'))
  fs.copySync(path.join(datPath, 'package-lock.json'),
    path.join(outputPath, 'package-lock.json'))

  // copy server.stache and server.js
  fs.copySync(path.join(datPath, 'server.stache'),
    path.join(outputPath, 'server.stache'))
  fs.copySync(path.join(datPath, 'server.js'),
    path.join(outputPath, 'server.js'))

  // copy shared styles required by the getCSSBundle call
  fs.copySync(path.join(datPath, 'styles'),
    path.join(outputPath, 'styles'))
}

function makePackageZip () {
  var zip = archiver('zip')
  var timestamp = (new Date()).toISOString().substr(0, 10)
  var zipname = 'a2j-dat_' + version + '_' + timestamp + '.zip'
  var output = fs.createWriteStream(path.join(datPath, '..', zipname))

  output.on('close', function () {
    fs.removeSync(path.join(outputPath))
    console.log(chalk.green('A2J DAT distributable package generated successfully!'))
  })

  zip.pipe(output)
  zip.directory(outputPath, 'a2j-dat').finalize()
}
