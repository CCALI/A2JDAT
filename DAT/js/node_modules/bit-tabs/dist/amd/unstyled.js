/*bit-tabs@0.2.0#unstyled*/
define([
    'exports',
    'can',
    'can/view/stache',
    './util',
    './tabs.stache',
    './panel.stache'
], function (exports, _can, _canViewStache, _util, _tabsStache, _panelStache) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
    }
    var _can2 = _interopRequireDefault(_can);
    var _stache = _interopRequireDefault(_canViewStache);
    var _util2 = _interopRequireDefault(_util);
    var _tabsStache2 = _interopRequireDefault(_tabsStache);
    var _panelStache2 = _interopRequireDefault(_panelStache);
    var BitPanelVM = _can2['default'].Map.extend({ active: false });
    exports.BitPanelVM = BitPanelVM;
    _can2['default'].Component.extend({
        tag: 'bit-panel',
        template: _panelStache2['default'],
        scope: BitPanelVM,
        events: {
            inserted: function inserted() {
                this.element.parent().scope().addPanel(this.scope);
            },
            removed: function removed() {
                this.element.parent().scope().removePanel(this.scope);
            }
        }
    });
    var BitTabsVM = _can2['default'].Map.extend({
            panels: [],
            tabsClass: '',
            addPanel: function addPanel(panel) {
                if (this.attr('panels').length === 0) {
                    this.makeActive(panel);
                }
                this.attr('panels').push(panel);
            },
            removePanel: function removePanel(panel) {
                var panels = this.attr('panels');
                _can2['default'].batch.start();
                panels.splice(panels.indexOf(panel), 1);
                if (panel === this.attr('active')) {
                    if (panels.length) {
                        this.makeActive(panels[0]);
                    } else {
                        this.removeAttr('active');
                    }
                }
                _can2['default'].batch.stop();
            },
            makeActive: function makeActive(panel) {
                this.attr('active', panel);
                this.attr('panels').each(function (panel) {
                    panel.attr('active', false);
                });
                panel.attr('active', true);
            },
            isActive: function isActive(panel) {
                return this.attr('active') === panel;
            }
        });
    exports.BitTabsVM = BitTabsVM;
    _can2['default'].Component.extend({
        tag: 'bit-tabs',
        template: _tabsStache2['default'],
        scope: BitTabsVM
    });
});
//# sourceMappingURL=unstyled.js.map