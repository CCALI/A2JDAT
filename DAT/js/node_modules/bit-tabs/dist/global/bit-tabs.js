/*[global-shim-start]*/
(function (exports, global){
	var origDefine = global.define;

	var get = function(name){
		var parts = name.split("."),
			cur = global,
			i;
		for(i = 0 ; i < parts.length; i++){
			if(!cur) {
				break;
			}
			cur = cur[parts[i]];
		}
		return cur;
	};
	var modules = (global.define && global.define.modules) ||
		(global._define && global._define.modules) || {};
	var ourDefine = global.define = function(moduleName, deps, callback){
		var module;
		if(typeof deps === "function") {
			callback = deps;
			deps = [];
		}
		var args = [],
			i;
		for(i =0; i < deps.length; i++) {
			args.push( exports[deps[i]] ? get(exports[deps[i]]) : ( modules[deps[i]] || get(deps[i]) )  );
		}
		// CJS has no dependencies but 3 callback arguments
		if(!deps.length && callback.length) {
			module = { exports: {} };
			var require = function(name) {
				return exports[name] ? get(exports[name]) : modules[name];
			};
			args.push(require, module.exports, module);
		}
		// Babel uses the exports and module object.
		else if(!args[0] && deps[0] === "exports") {
			module = { exports: {} };
			args[0] = module.exports;
			if(deps[1] === "module") {
				args[1] = module;
			}
		} else if(!args[0] && deps[0] === "module") {
			args[0] = { id: moduleName };
		}

		global.define = origDefine;
		var result = callback ? callback.apply(null, args) : undefined;
		global.define = ourDefine;

		// Favor CJS module.exports over the return value
		modules[moduleName] = module && module.exports ? module.exports : result;
	};
	global.define.orig = origDefine;
	global.define.modules = modules;
	global.define.amd = true;
	ourDefine("@loader", [], function(){
		// shim for @@global-helpers
		var noop = function(){};
		return {
			get: function(){
				return { prepareGlobal: noop, retrieveGlobal: noop };
			},
			global: global,
			__exec: function(__load){
				eval("(function() { " + __load.source + " \n }).call(global);");
			}
		};
	});
})({},window)
/*bit-tabs@0.2.0#util*/
define('bit-tabs/util', function (require, exports, module) {
    module.exports = { name: 'util' };
});
/*bit-tabs@0.2.0#tabs.stache!can@2.3.0-beta.0#view/stache/system*/
define('bit-tabs/tabs.stache', [
    'module',
    'can/view/stache/stache',
    'can/view/stache/mustache_core'
], function (module, stache, mustacheCore) {
    var renderer = stache([
            {
                'tokenType': 'start',
                'args': [
                    'ul',
                    false
                ]
            },
            {
                'tokenType': 'attrStart',
                'args': ['class']
            },
            {
                'tokenType': 'special',
                'args': ['tabsClass']
            },
            {
                'tokenType': 'attrEnd',
                'args': ['class']
            },
            {
                'tokenType': 'end',
                'args': [
                    'ul',
                    false
                ]
            },
            {
                'tokenType': 'special',
                'args': ['#panels']
            },
            {
                'tokenType': 'chars',
                'args': ['\n    ']
            },
            {
                'tokenType': 'start',
                'args': [
                    'li',
                    false
                ]
            },
            {
                'tokenType': 'special',
                'args': ['#isActive']
            },
            {
                'tokenType': 'attrStart',
                'args': ['class']
            },
            {
                'tokenType': 'attrValue',
                'args': ['active']
            },
            {
                'tokenType': 'attrEnd',
                'args': ['class']
            },
            {
                'tokenType': 'special',
                'args': ['/isActive']
            },
            {
                'tokenType': 'attrStart',
                'args': ['can-click']
            },
            {
                'tokenType': 'attrValue',
                'args': ['makeActive']
            },
            {
                'tokenType': 'attrEnd',
                'args': ['can-click']
            },
            {
                'tokenType': 'end',
                'args': [
                    'li',
                    false
                ]
            },
            {
                'tokenType': 'chars',
                'args': ['\n\t\t  ']
            },
            {
                'tokenType': 'start',
                'args': [
                    'a',
                    false
                ]
            },
            {
                'tokenType': 'attrStart',
                'args': ['href']
            },
            {
                'tokenType': 'attrValue',
                'args': ['javascript://']
            },
            {
                'tokenType': 'attrEnd',
                'args': ['href']
            },
            {
                'tokenType': 'end',
                'args': [
                    'a',
                    false
                ]
            },
            {
                'tokenType': 'special',
                'args': ['title']
            },
            {
                'tokenType': 'close',
                'args': ['a']
            },
            {
                'tokenType': 'chars',
                'args': ['\n\t']
            },
            {
                'tokenType': 'close',
                'args': ['li']
            },
            {
                'tokenType': 'special',
                'args': ['/panels']
            },
            {
                'tokenType': 'chars',
                'args': ['\n']
            },
            {
                'tokenType': 'close',
                'args': ['ul']
            },
            {
                'tokenType': 'chars',
                'args': ['\n']
            },
            {
                'tokenType': 'start',
                'args': [
                    'content',
                    false
                ]
            },
            {
                'tokenType': 'end',
                'args': [
                    'content',
                    false
                ]
            },
            {
                'tokenType': 'close',
                'args': ['content']
            },
            {
                'tokenType': 'chars',
                'args': ['\n']
            },
            {
                'tokenType': 'done',
                'args': []
            }
        ]);
    return function (scope, options) {
        var moduleOptions = { module: module };
        if (!(options instanceof mustacheCore.Options)) {
            options = new mustacheCore.Options(options || {});
        }
        return renderer(scope, options.add(moduleOptions));
    };
});
/*bit-tabs@0.2.0#panel.stache!can@2.3.0-beta.0#view/stache/system*/
define('bit-tabs/panel.stache', [
    'module',
    'can/view/stache/stache',
    'can/view/stache/mustache_core'
], function (module, stache, mustacheCore) {
    var renderer = stache([
            {
                'tokenType': 'special',
                'args': ['#if active']
            },
            {
                'tokenType': 'start',
                'args': [
                    'content',
                    false
                ]
            },
            {
                'tokenType': 'end',
                'args': [
                    'content',
                    false
                ]
            },
            {
                'tokenType': 'close',
                'args': ['content']
            },
            {
                'tokenType': 'special',
                'args': ['/if']
            },
            {
                'tokenType': 'done',
                'args': []
            }
        ]);
    return function (scope, options) {
        var moduleOptions = { module: module };
        if (!(options instanceof mustacheCore.Options)) {
            options = new mustacheCore.Options(options || {});
        }
        return renderer(scope, options.add(moduleOptions));
    };
});
/*bit-tabs@0.2.0#unstyled*/
define('bit-tabs/unstyled', [
    'exports',
    'can',
    'can/view/stache/stache',
    'bit-tabs/util',
    'bit-tabs/tabs.stache',
    'bit-tabs/panel.stache'
], function (exports, _can, _canViewStache, _util, _tabsStache, _panelStache) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
    }
    var _can2 = _interopRequireDefault(_can);
    var _stache = _interopRequireDefault(_canViewStache);
    var _util2 = _interopRequireDefault(_util);
    var _tabsStache2 = _interopRequireDefault(_tabsStache);
    var _panelStache2 = _interopRequireDefault(_panelStache);
    var BitPanelVM = _can2['default'].Map.extend({ active: false });
    exports.BitPanelVM = BitPanelVM;
    _can2['default'].Component.extend({
        tag: 'bit-panel',
        template: _panelStache2['default'],
        scope: BitPanelVM,
        events: {
            inserted: function inserted() {
                this.element.parent().scope().addPanel(this.scope);
            },
            removed: function removed() {
                this.element.parent().scope().removePanel(this.scope);
            }
        }
    });
    var BitTabsVM = _can2['default'].Map.extend({
            panels: [],
            tabsClass: '',
            addPanel: function addPanel(panel) {
                if (this.attr('panels').length === 0) {
                    this.makeActive(panel);
                }
                this.attr('panels').push(panel);
            },
            removePanel: function removePanel(panel) {
                var panels = this.attr('panels');
                _can2['default'].batch.start();
                panels.splice(panels.indexOf(panel), 1);
                if (panel === this.attr('active')) {
                    if (panels.length) {
                        this.makeActive(panels[0]);
                    } else {
                        this.removeAttr('active');
                    }
                }
                _can2['default'].batch.stop();
            },
            makeActive: function makeActive(panel) {
                this.attr('active', panel);
                this.attr('panels').each(function (panel) {
                    panel.attr('active', false);
                });
                panel.attr('active', true);
            },
            isActive: function isActive(panel) {
                return this.attr('active') === panel;
            }
        });
    exports.BitTabsVM = BitTabsVM;
    _can2['default'].Component.extend({
        tag: 'bit-tabs',
        template: _tabsStache2['default'],
        scope: BitTabsVM
    });
});
/*bit-tabs@0.2.0#bit-tabs*/
define('bit-tabs', [
    'exports',
    'bit-tabs/tabs.less',
    'bit-tabs/unstyled'
], function (exports, _tabsLess, _unstyled) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    function _interopRequireWildcard(obj) {
        if (obj && obj.__esModule) {
            return obj;
        } else {
            var newObj = {};
            if (obj != null) {
                for (var key in obj) {
                    if (Object.prototype.hasOwnProperty.call(obj, key))
                        newObj[key] = obj[key];
                }
            }
            newObj['default'] = obj;
            return newObj;
        }
    }
    function _defaults(obj, defaults) {
        var keys = Object.getOwnPropertyNames(defaults);
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            var value = Object.getOwnPropertyDescriptor(defaults, key);
            if (value && value.configurable && obj[key] === undefined) {
                Object.defineProperty(obj, key, value);
            }
        }
        return obj;
    }
    _defaults(exports, _interopRequireWildcard(_unstyled));
});
/*[global-shim-end]*/
(function (){
	window._define = window.define;
	window.define = window.define.orig;
})();
//# sourceMappingURL=bit-tabs.js.map