{
  "_args": [
    [
      {
        "raw": "transpile@https://registry.npmjs.org/transpile/-/transpile-0.9.7.tgz",
        "scope": null,
        "escapedName": "transpile",
        "name": "transpile",
        "rawSpec": "https://registry.npmjs.org/transpile/-/transpile-0.9.7.tgz",
        "spec": "https://registry.npmjs.org/transpile/-/transpile-0.9.7.tgz",
        "type": "remote"
      },
      "/Users/tobias/iit/azure/DAT/StandaloneDAT"
    ]
  ],
  "_from": "transpile@>=0.9.4 <0.10.0",
  "_id": "transpile@0.9.7",
  "_inCache": true,
  "_location": "/transpile",
  "_phantomChildren": {
    "amdefine": "1.0.0",
    "babel-plugin-constant-folding": "1.0.1",
    "babel-plugin-dead-code-elimination": "1.0.2",
    "babel-plugin-eval": "1.0.1",
    "babel-plugin-inline-environment-variables": "1.0.1",
    "babel-plugin-jscript": "1.0.4",
    "babel-plugin-member-expression-literals": "1.0.1",
    "babel-plugin-property-literals": "1.0.1",
    "babel-plugin-proto-to-assign": "1.0.4",
    "babel-plugin-react-constant-elements": "1.0.3",
    "babel-plugin-react-display-name": "1.0.3",
    "babel-plugin-remove-console": "1.0.1",
    "babel-plugin-remove-debugger": "1.0.1",
    "babel-plugin-runtime": "1.0.7",
    "babel-plugin-undeclared-variables-check": "1.0.2",
    "babel-plugin-undefined-to-void": "1.1.6",
    "bluebird": "2.11.0",
    "brace-expansion": "1.1.6",
    "chalk": "1.1.3",
    "convert-source-map": "1.3.0",
    "debug": "2.2.0",
    "detect-indent": "3.0.1",
    "esutils": "2.0.2",
    "fs-readdir-recursive": "0.1.2",
    "home-or-tmp": "1.0.0",
    "is-integer": "1.0.6",
    "line-numbers": "0.2.0",
    "output-file-sync": "1.1.2",
    "path-exists": "1.0.0",
    "path-is-absolute": "1.0.1",
    "private": "0.1.6",
    "regenerator": "0.8.34",
    "regexpu": "1.3.0",
    "repeating": "1.1.3",
    "shebang-regex": "1.0.0",
    "slash": "1.0.0",
    "strip-json-comments": "1.0.4",
    "to-fast-properties": "1.0.2",
    "trim-right": "1.0.1",
    "try-resolve": "1.0.1"
  },
  "_requested": {
    "raw": "transpile@https://registry.npmjs.org/transpile/-/transpile-0.9.7.tgz",
    "scope": null,
    "escapedName": "transpile",
    "name": "transpile",
    "rawSpec": "https://registry.npmjs.org/transpile/-/transpile-0.9.7.tgz",
    "spec": "https://registry.npmjs.org/transpile/-/transpile-0.9.7.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/",
    "/steal-tools"
  ],
  "_resolved": "https://registry.npmjs.org/transpile/-/transpile-0.9.7.tgz",
  "_shasum": "95c5712e9837e445c12380ec0fe0edd838ceb7ba",
  "_shrinkwrap": null,
  "_spec": "transpile@https://registry.npmjs.org/transpile/-/transpile-0.9.7.tgz",
  "_where": "/Users/tobias/iit/azure/DAT/StandaloneDAT",
  "author": {
    "name": "Bitovi",
    "email": "contact@bitovi.com",
    "url": "http://bitovi.com/"
  },
  "bugs": {
    "url": "https://github.com/stealjs/transpile/issues"
  },
  "dependencies": {
    "babel-core": "5.8.14",
    "comparify": "0.1.0",
    "escodegen": "^1.7.0",
    "esprima": "^2.7.0",
    "estraverse": "1.5.0",
    "js-module-formats": "~0.1.2",
    "js-string-escape": "1.0.0",
    "object.assign": "^4.0.1",
    "sourcemap-to-ast": "0.0.2",
    "traceur": "0.0.91",
    "urix": "^0.1.0"
  },
  "description": "Transpiles JavaScript modules from one format to another.",
  "devDependencies": {
    "chai": "*",
    "istanbul": "*",
    "mocha": "1.18.2",
    "xunit-file": "*"
  },
  "globalBrowser": {
    "traceur#./src/node/traceur.js": "./browser/traceur.js"
  },
  "homepage": "https://github.com/stealjs/transpile#readme",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://opensource.org/licenses/mit-license.php"
    }
  ],
  "main": "main",
  "name": "transpile",
  "optionalDependencies": {},
  "readme": "Transpiles JavaScript modules from one format to another.\n\nIt supports from:\n \n - es6, \n - cjs, \n - amd, \n - steal\n \nto \n\n - amd, \n - steal, \n - cjs.\n\nCurrently, it can not transpile to ES6 module syntax.\n\n## Install\n\n    > npm install transpile --save-dev\n\n## Use\n\n`transpile.to` transpiles from one format to another format. `transpile.able`\nlets you know if a transpile is possible.\n\n### Formats\n\nFormats are specified by strings like:\n\n - \"es6\" - ES6 Module syntax like `import Point from \"math\";`\n - \"cjs\" - CommonJS syntax like `var _ = require('underscore');`\n - \"amd\" - [Asynchronous Module Definition](https://github.com/amdjs/amdjs-api/wiki/AMD) \n         syntax like `define(['jquery'],function($){});`\n - \"steal\" - steal syntax like `steal('jquery', function($){})`\n\n\n### `transpile.to(load, format, options) -> transpiledResult`\n\nTranspiles from the `load`'s format to the specified format. If\nthe `load` does not specify a format, `\"es6\"` modules are assumed. Returns\nan object containing the transpiled source and sourceMap (if sourceMap option provided).\n\nExample:\n\n```js\nvar transpile = require('transpile');\nvar res = transpile.to({\n  name: \"my/module\",\n  source: \"var foo = require('foo')\",\n  metadata: {format: \"cjs\"}\n}, \"amd\")\n\nres.code //-> \"define(\"my/module\", function(require, exports, module) { ... \"\n```\n    \nA load is an object in the shape of \nan [ES6 Load Record](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-load-records-and-loadrequest-objects) like:\n\n```js\n{\n  name: \"moduleName\",\n  source: \"source code\",\n  metadata: {format: \"formatName\"}\n}\n```\n\n#### NOTE\n\nPreviously `transpile.to` returned a string containing the transpiled source. To accomodate Source Maps support the API has changed and now returns an object that looks like:\n\n```js\n{\n  code: \"define(...\", // The transpiled source,\n  map: {}, // A source map, if sourceMaps option is provided.\n  ast: {} // A Mozilla Parser API compatible AST, created by Esprima\n}\n```\n\n#### options\n\n - __normalizeMap__ `Object<moduleName,moduleName>` - A mapping module names that will\n   be used to replace dependency names in the transpiled result.\n - __normalize__ `function(name, currentName, address) -> String` - A function\n   that can be used to change moduleNames that are written in the transpiled result.\n - __namedDefines__ `Boolean=false` - Set to true to insert named defines. \n - __transpiler__ `String=traceur` - Set which ES6 transpiler to use. Valid options are `traceur` or `6to5` with `traceur` being the default.\n - __transpile__ `function(source, compileOptions, options) -> Object` - If you want to handle tranpiling yourself and not use the built-in options, this is a function that will be given the source and is expected to return an object containing a `code` string.\n - __sourceMaps__ `Boolean=false` - Set to true to return a `map` and `ast` object along with the result.\n - __sourceMapsContent__ `Boolean=false` - If `sourceMaps` is set to true, this option will include the original source contents with the source maps.\n\n### `transpile.able(fromFormat, toFormat) -> transpiledPath`\n\nReturns the path used to transpile \nfrom `fromFormat` to `toFormat`. If transpiling is not possible, `null` will be\nreturned.\n\nExample:\n\n```js\nvar res = transpile.able(\"steal\",\"cjs\");\nres //-> [\"steal\",\"amd\"];\n```\n\nThis means that a module will be converted from \"steal\" to \"amd\" and then\nto \"cjs\".\n\n\n## Test\n\n    > npm test\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/stealjs/transpile.git"
  },
  "scripts": {
    "mocha": "mocha test/*.js",
    "test": "./node_modules/istanbul/lib/cli.js cover -- ./node_modules/.bin/_mocha test/*.js --reporter spec",
    "test-windows": "mocha test\\*.js --reporter spec"
  },
  "system": {
    "meta": {
      "traceur#./bin/traceur": {
        "format": "global"
      }
    }
  },
  "version": "0.9.7"
}
