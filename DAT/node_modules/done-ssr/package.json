{
  "_args": [
    [
      {
        "raw": "done-ssr@https://registry.npmjs.org/done-ssr/-/done-ssr-0.13.4.tgz",
        "scope": null,
        "escapedName": "done-ssr",
        "name": "done-ssr",
        "rawSpec": "https://registry.npmjs.org/done-ssr/-/done-ssr-0.13.4.tgz",
        "spec": "https://registry.npmjs.org/done-ssr/-/done-ssr-0.13.4.tgz",
        "type": "remote"
      },
      "/Users/tobias/iit/azure/DAT/StandaloneDAT"
    ]
  ],
  "_from": "done-ssr@>=0.13.4 <0.14.0",
  "_id": "done-ssr@0.13.4",
  "_inCache": true,
  "_location": "/done-ssr",
  "_phantomChildren": {},
  "_requested": {
    "raw": "done-ssr@https://registry.npmjs.org/done-ssr/-/done-ssr-0.13.4.tgz",
    "scope": null,
    "escapedName": "done-ssr",
    "name": "done-ssr",
    "rawSpec": "https://registry.npmjs.org/done-ssr/-/done-ssr-0.13.4.tgz",
    "spec": "https://registry.npmjs.org/done-ssr/-/done-ssr-0.13.4.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/done-ssr/-/done-ssr-0.13.4.tgz",
  "_shasum": "821157b3ac0fdab245476dc9e3e4f4b281f49575",
  "_shrinkwrap": null,
  "_spec": "done-ssr@https://registry.npmjs.org/done-ssr/-/done-ssr-0.13.4.tgz",
  "_where": "/Users/tobias/iit/azure/DAT/StandaloneDAT",
  "author": {
    "name": "Bitovi"
  },
  "bugs": {
    "url": "https://github.com/donejs/done-ssr/issues"
  },
  "dependencies": {
    "can": "^2.3.0-pre || ^2.3.0-beta || ^2.3.0",
    "can-zone": "^0.5.0",
    "lodash.defaults": "^4.0.1",
    "steal": "^0.16.0",
    "websocket": "^1.0.22",
    "xmlhttprequest": "^1.8.0"
  },
  "description": "Server-side rendering for CanJS applications",
  "devDependencies": {
    "can-fixture": "^0.1.2",
    "copy-dir": "0.0.8",
    "documentjs": "^0.3.0",
    "done-autorender": "^0.7.0",
    "done-ssr-middleware": "^0.1.5",
    "es6-promise": "^3.1.2",
    "jquery": "~2.2.1",
    "jshint": "^2.8.0",
    "nock": "^8.0.0",
    "spawn-mochas": "^1.1.0",
    "through2": "^2.0.1"
  },
  "homepage": "https://github.com/donejs/done-ssr",
  "keywords": [
    "stealjs",
    "canjs",
    "donejs"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "name": "done-ssr",
  "optionalDependencies": {},
  "readme": "<!--\n@page done-ssr\n@group done-ssr.node 0 Node\n@group done-ssr.client 1 Client\n@group done-ssr.helpers 2 Helpers\n@group done-ssr.assets 3 Assets\n-->\n\n[![Build Status](https://travis-ci.org/donejs/done-ssr.svg?branch=master)](https://travis-ci.org/donejs/done-ssr)\n[![npm version](https://badge.fury.io/js/done-ssr.svg)](http://badge.fury.io/js/done-ssr)\n\n# done-ssr\n\nServer-side rendering for [DoneJS](https://donejs.com/).\n\n- [Install](#install)\n- [Usage](#usage)\n- [API](#api)\n  - <code>[ssr(system, options)](#ssrsystem-options---render)</code>\n    - <code>[system](#system)</code>\n\t- <code>[options](#options)</code>\n\t  - <code>[timeout](#timeout--5000)</code>\n\t  - <code>[debug](#debug--false)</code>\n\t  - <code>[html5shiv](#html5shiv--false)</code>\n  - <code>[render(request)](#renderrequest)</code>\n\n## Install\n\n```shell\nnpm install done-ssr --save\n```\n\n## Usage\n\n**done-ssr** takes a system configuration object (the same object used by steal-tools to configure building) and returns a function that will render requests.\n\nPass your request into the render function and pipe the resulting stream into the response.\n\n```js\nvar http = require(\"http\");\nvar ssr = require(\"done-ssr\");\nvar render = ssr();\n\nvar server = http.createServer(function(request, response){\n\trender(request).pipe(response);\n});\n\nserver.listen(8080);\n```\n\n### Your app\n\ndone-ssr expect's your project's **main** to export a function that renders based on the request parameter. This will work with any module format supported by Steal.\n\n```js\nvar ViewModel = can.Map.extend( { ... });\n\nmodule.exports = function(request){\n  var params = can.route.deparam(location.pathname);\n  var viewModel = new ViewModel(params);\n\n  // Do whatever is needed to render\n};\n```\n\nThe **request** parameter is the raw Node request object so you can do things like get request headers if needed.\n\nAdditionally the **location** object is set globally so you can use it like you would in a browser window.\n\nMore can be found in the [main module docs](https://github.com/donejs/done-ssr/blob/master/docs/main.md).\n\n### Express Middleware and Development Server\n\nAs of *0.12* can-ssr was renamed to done-ssr. The Express middleware and can-serve functionality were moved to their own projects:\n\n* [done-ssr-middleware](https://github.com/donejs/done-ssr-middleware)\n* [done-serve](https://github.com/donejs/done-serve)\n\n## API\n\n### ssr(system, options) -> render\n\nThe `ssr` function contains two arguments, one for the **system** object and one is an **options** object:\n\n#### system\n\nConfiguration options that are a [SystemConfig](http://stealjs.com/docs/steal-tools.SystemConfig.html). This is the same object that is passed into steal-tools to configure the loader for building.\n\n#### options\n\n##### timeout : 5000\n\nSpecify a timeout in milliseconds for how long should be waited before returning whatever HTML has already been rendered. Defaults to **5000**\n\n##### auth: {cookie, domains}\n\nAn object for enabling JavaScript Web Tokens (JWT) support for XHR requests made by the SSR server. Must contain both of the following values:\n\n- `cookie`: A string representing the cookie name where the SSR server can look to find a JWT token.  That token gets applied as the \"Bearer\" token in the authorization header of every outgoing XHR.\n\n> For example, if the SSR server receives a cookie like `feathers-jwt=<token>;`, and the `authCookie` option is set to `\"feathers-jwt\"`, outgoing requests from the SSR server will have an `authorization` header of `Bearer <token>`\n\n- `domains`: An array of domain names to which the JWT token will be sent.  Any domains not in this list will not receive the JWT token.\n\n##### debug : false\n\nSpecify to turn on debug mode when used in conjunction with timeout. If rendering times out debugging information will be attached to a modal window in the document. For this reason you only want to use the debug option during development.\n\n![debug output](https://cloud.githubusercontent.com/assets/361671/14474862/08b5f01e-00cd-11e6-8d70-b3f3ba835493.png)\n\n##### html5shiv : false\n\nSpecifies where html5shiv should be configured and attached to the document's head. This will automatically register all of the custom can.Component elements for you when using IE8.\n\n### render(request)\n\nThe **render** function is returned from the call to [ssr](#ssrsystem-options---render) and is what used to render requests. It returns a [readable stream](https://nodejs.org/api/stream.html#stream_class_stream_readable) that can be piped into other streams, using the response stream.\n\n```js\nrender(request).pipe(response);\n```\n\nYou can use request/response streams from servers created with `require(\"http\")`, or [Express](http://expressjs.com/) and probably most other Node servers.\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/donejs/done-ssr.git"
  },
  "scripts": {
    "copy": "node scripts/copy.js",
    "document": "documentjs",
    "jshint": "jshint lib/.  test/*.js --config",
    "mocha": "node test/test.js",
    "publish": "git push origin && git push origin --tags",
    "release:major": "npm version major && npm publish",
    "release:minor": "npm version minor && npm publish",
    "release:patch": "npm version patch && npm publish",
    "test": "npm run jshint && npm run test:only",
    "test:only": "npm run copy && npm run mocha"
  },
  "system": {
    "npmDependencies": [
      "can",
      "steal-qunit"
    ]
  },
  "version": "0.13.4"
}
