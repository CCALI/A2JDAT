{
  "_args": [
    [
      {
        "raw": "rubberduck@https://registry.npmjs.org/rubberduck/-/rubberduck-1.1.0.tgz",
        "scope": null,
        "escapedName": "rubberduck",
        "name": "rubberduck",
        "rawSpec": "https://registry.npmjs.org/rubberduck/-/rubberduck-1.1.0.tgz",
        "spec": "https://registry.npmjs.org/rubberduck/-/rubberduck-1.1.0.tgz",
        "type": "remote"
      },
      "/Users/tobias/iit/azure/DAT/StandaloneDAT"
    ]
  ],
  "_from": "rubberduck@>=1.0.0 <2.0.0",
  "_id": "rubberduck@1.1.0",
  "_inCache": true,
  "_location": "/rubberduck",
  "_phantomChildren": {},
  "_requested": {
    "raw": "rubberduck@https://registry.npmjs.org/rubberduck/-/rubberduck-1.1.0.tgz",
    "scope": null,
    "escapedName": "rubberduck",
    "name": "rubberduck",
    "rawSpec": "https://registry.npmjs.org/rubberduck/-/rubberduck-1.1.0.tgz",
    "spec": "https://registry.npmjs.org/rubberduck/-/rubberduck-1.1.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/",
    "/feathers"
  ],
  "_resolved": "https://registry.npmjs.org/rubberduck/-/rubberduck-1.1.0.tgz",
  "_shasum": "1bc3df8e7411a814277b2d9070727363496d8209",
  "_shrinkwrap": null,
  "_spec": "rubberduck@https://registry.npmjs.org/rubberduck/-/rubberduck-1.1.0.tgz",
  "_where": "/Users/tobias/iit/azure/DAT/StandaloneDAT",
  "author": {
    "name": "David Luecke",
    "email": "daff@neyeon.com",
    "url": "http://daffl.github.com"
  },
  "bugs": {
    "url": "https://github.com/daffl/rubberduck/issues"
  },
  "contributors": [
    {
      "name": "David Ellis",
      "email": "d.f.ellis@ieee.org",
      "url": "http://uber.com"
    }
  ],
  "dependencies": {},
  "description": "Evented AOP for NodeJS",
  "devDependencies": {
    "browserify": "^12.0.1",
    "grunt": "~0.4.2",
    "grunt-cli": "~0.1.11",
    "grunt-contrib-jshint": "~0.7.2",
    "grunt-release": "~0.6.0",
    "grunt-simple-mocha": "^0.4.0"
  },
  "directories": {
    "lib": "lib"
  },
  "engines": {
    "node": "*"
  },
  "homepage": "http://daffl.github.com/rubberduck",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/mit-license.php"
    }
  ],
  "main": "lib/rubberduck",
  "name": "rubberduck",
  "optionalDependencies": {},
  "readme": "# Rubberduck\n\n[![Build Status](https://secure.travis-ci.org/daffl/rubberduck.png)](http://travis-ci.org/daffl/rubberduck)\n\n__Evented Aspect Oriented Programming__\n\nRubberduck punches JavaScript objects and lets you receive events before and after a method executes.\nInstall it using [NPM](http://npmjs.org)\n\n> npm install rubberduck\n\nor clone the [GitHub repository](https://github.com/daffl/rubberduck).\n\n\tvar rubberduck = require('rubberduck');\n\n## Duck punching\n\n### Simple punching\n\nLets punch the _push_ method of an array instance and log the element that gets\npushed before the method executes and the new length of the array (returned by Array.push)\nand the pushed element when it returns.\n\n```js\nvar rubberduck = require('rubberduck'),\n\tmyarray = [],\n\temitter = rubberduck.emitter(myarray).punch('push');\n\nemitter.on('beforePush', function(args, instance) {\n\tconsole.log('About to push ' + args[0]);\n});\n\nemitter.on('afterPush', function(result, args, instance) {\n\tconsole.log('Pushed ' + args[0] + ', the new length is ' + result);\n});\n\nmyarray.push('Test');\n```\n\n### Listening to events\n\nOnce you picked the methods to be punched the emitter fires the following events:\n\n```js\n// Before any punched method executes\nemitter.on('before', function(args, instance, name) {\n\t// args : Array of function arguments\n\t// instance: The function context (this reference)\n\t// name : The function name\n});\n\n// After any punched method returned\nemitter.on('after', function(result, args, instance, name) {\n\t// result : The return value or an array of\n\t//\tthe callback arguments for asynchronous functions\n\t// args : Array of function arguments\n\t// instance: The function context (this reference)\n\t// name : The function name\n});\n```\n\nYou can also listen to specific events by using camelcased event names.\nTo get evnts only for the _test_ method, attach the following event listener:\n\n```js\nemitter.on('beforeTest', function(args, instance, name) {\n});\n\nemitter.on('afterTest', function(result, args, instance, name) {\n});\n```\n\nThe parameters are the same as in the general event listeners.\n\n### Asynchronous punching\n\nYou can also punch asynchronous methods, that execute a callback instead of returning the value.\nIn this case the _after_ events receives an array of the callback parameters instead of a single return value.\nJust tell the event emitter the position of the callback in your arguments list when punching a method\n(use -1 if the callback is at the end of the argument list):\n\n```js\nvar rubberduck = require('rubberduck'),\nDuck = function(name) {\n\tthis.name = name;\n}\n\nDuck.prototype.quack = function(callback)\n{\n\tcallback(null, this.name + ' quacks!');\n}\n\nvar donald = new Duck('Donald'),\n\temitter = rubberduck.emitter(donald).punch('quack', 0);\n\n// Log the callback results for _quack_\nemitter.on('afterQuack', function(results) {\n\t// Results contains the callback arguments\n\tconsole.log(results);\n});\n```\n\n## Advanced usage\n\n### Punching prototypes and selective punching\n\nYou can also punch an objects prototype to receive events about all its instances but it\nis important to be selective about what methods to punch. Firing events on methods that get\ncalled many times (e.g. attaching to the Array.prototype) might lead to big performance\nhits and can quickly exceed the maximum call stack size.\n\n### Punching methods that throw\n\nMethods that throw instead of return will still call the after event handlers, with the error\nprovided as the result instead. This includes asynchronous functions with callbacks both before\nand after the callback occurs. These methods fire ``error`` and ``errorMethod`` events in place\nof the ``after`` and ``afterMethod`` events. Asynchronous methods that return an ``Error``\nobject as the first argument to the callback will also fire error-type events rather than after.\n\n### Strict punched methods\n\nA second optional parameter to `punch` (the third argument) is a flag indicating whether or not\nrubberduck should be strict with the signature of the resulting function. This means the ``length``\nproperty of any punched method will remain the same (rather than revert to zero), at the cost of\na slightly more expensive mechanism to punch the methods, and is off by default.\n\n## Changelog\n\n__1.0.2__\n\n- `wrapAsync` should still return the original value ([#5](https://github.com/daffl/rubberduck/pull/5))\n\n__1.0.1:__\n\n- Switched to Mocha for build system\n- Some documentation updates\n\n__1.0.0:__\n\n- Small internal reorganization\n- JSHint and code style improvements\n\n__0.x:__\n\n- Initial alpha releases\n\n## License\n\nCopyright (C) 2014 David Luecke daff@neyeon.de\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/daffl/rubberduck.git"
  },
  "scripts": {
    "browserify": "browserify lib/rubberduck.js --outfile dist/rubberduck.js --standalone Rubberduck",
    "test": "grunt test"
  },
  "version": "1.1.0"
}
